Line 1: type_specifier : INT

int

Line 1: type_specifier : INT

int

Line 1: parameter_list : type_specifier ID

int a

Line 1: type_specifier : INT

int

Line 1: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Error at line 2: Undeclared variable a

Line 2: variable : ID

a

Line 2: factor : variable

a

Line 2: unary_expression : factor

a

Line 2: term : unary_expression

a

Line 2: simple_expression : term

a

Error at line 2: Undeclared variable b

Line 2: variable : ID

b

Line 2: factor : variable

b

Line 2: unary_expression : factor

b

Line 2: term : unary_expression

b

Line 2: simple_expression : simple_expression ADDOP term

a+b

Line 2: rel_expression : simple_expression

a+b

Line 2: logic_expression : rel_expression

a+b

Line 2: expression : logic_expression

a+b

Line 2: statement : RETURN expression SEMICOLON

return a+b;


Line 2: statements : statement

return a+b;


Line 3: compound_statement : LCURL statements RCURL

{
return a+b;
}

ScopeTable # 1.1
ScopeTable # 1
0 --> < var : ID >

Line 3: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int var(int a,int b){
return a+b;
}


Line 3: unit : func_definition

int var(int a,int b){
return a+b;
}


Line 3: program : unit

int var(int a,int b){
return a+b;
}


Line 4: type_specifier : INT

int

Line 5: type_specifier : FLOAT

float

Line 5: declaration_list : ID

d

Line 5: var_declaration : type_specifier declaration_list SEMICOLON

float d;


Line 5: statement : var_declaration

float d;


Line 5: statements : statement

float d;


Line 6: variable : ID

d

Line 6: factor : CONST_INT

1

Line 6: unary_expression : factor

1

Line 6: term : unary_expression

1

Line 6: simple_expression : term

1

Line 6: rel_expression : simple_expression

1

Line 6: logic_expression : rel_expression

1

Line 6: arguments : logic_expression

1

Line 6: factor : CONST_INT

2

Line 6: unary_expression : factor

2

Line 6: term : unary_expression

2

Line 6: factor : CONST_INT

3

Line 6: unary_expression : factor

3

Line 6: term : term MULOP unary_expression

2*3

Line 6: simple_expression : term

2*3

Line 6: rel_expression : simple_expression

2*3

Line 6: logic_expression : rel_expression

2*3

Line 6: arguments : arguments COMMA logic_expression

1,2*3

Line 6: argument_list : arguments

1,2*3

Line 6: factor : ID LPAREN argument_list RPAREN

var(1,2*3)

Line 6: unary_expression : factor

var(1,2*3)

Line 6: term : unary_expression

var(1,2*3)

Line 6: simple_expression : term

var(1,2*3)

Line 6: factor : CONST_FLOAT

3.5

Line 6: unary_expression : factor

3.5

Line 6: term : unary_expression

3.5

Line 6: factor : CONST_INT

2

Line 6: unary_expression : factor

2

Line 6: term : term MULOP unary_expression

3.5*2

Line 6: simple_expression : simple_expression ADDOP term

var(1,2*3)+3.5*2

Line 6: rel_expression : simple_expression

var(1,2*3)+3.5*2

Line 6: logic_expression : rel_expression

var(1,2*3)+3.5*2

Line 6: expression : variable ASSIGNOP logic_expression

d=var(1,2*3)+3.5*2

Line 6: expression_statement : expression SEMICOLON

d=var(1,2*3)+3.5*2;


Line 6: statement : expression_statement

d=var(1,2*3)+3.5*2;


Line 6: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;


Line -1: statement : var_declaration



Line 6: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;


Line -1: statement : var_declaration



Line 6: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;


Error at line 7: Undeclared variable i

Line 7: variable : ID

i

Line 7: factor : CONST_INT

0

Line 7: unary_expression : factor

0

Line 7: term : unary_expression

0

Line 7: simple_expression : term

0

Line 7: rel_expression : simple_expression

0

Line 7: logic_expression : rel_expression

0

Line 7: expression : variable ASSIGNOP logic_expression

i=0

Line 7: expression_statement : expression SEMICOLON

i=0;


Line 7: statement : expression_statement

i=0;


Line 7: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;
i=0;


Error at line 9: Undeclared variable i

Line 9: variable : ID

i

Line 9: factor : variable

i

Line 9: unary_expression : factor

i

Line 9: term : unary_expression

i

Line 9: simple_expression : term

i

Line 9: factor : CONST_INT

3

Line 9: unary_expression : factor

3

Line 9: term : unary_expression

3

Line 9: simple_expression : term

3

Line 9: rel_expression : simple_expression RELOP simple_expression

i==3

Line 9: logic_expression : rel_expression

i==3

Line 9: expression : logic_expression

i==3

Line 9: statement : BREAK SEMICOLON SEMICOLON

break;

Line 9: statement : IF LPAREN expression RPAREN statement

if(i==3)break;

Line 9: statements : statement

if(i==3)break;

Error at line 10: Undeclared variable i

Line 10: variable : ID

i

Line 10: factor : variable INCOP

i++

Line 10: unary_expression : factor

i++

Line 10: term : unary_expression

i++

Line 10: simple_expression : term

i++

Line 10: rel_expression : simple_expression

i++

Line 10: logic_expression : rel_expression

i++

Line 10: expression : logic_expression

i++

Line 10: expression_statement : expression SEMICOLON

i++;


Line 10: statement : expression_statement

i++;


Line 10: statements : statements statement

if(i==3)break;i++;


Line 11: compound_statement : LCURL statements RCURL

{
if(i==3)break;i++;
}

ScopeTable # 1.3
ScopeTable # 1.2
2 --> < d : ID >
ScopeTable # 1
0 --> < var : ID >< b : ID >
6 --> < a : ID >< main : ID >

Error at line 11: Undeclared variable i

Line 11: variable : ID

i

Line 11: factor : variable

i

Line 11: unary_expression : factor

i

Line 11: term : unary_expression

i

Line 11: simple_expression : term

i

Line 11: factor : CONST_INT

5

Line 11: unary_expression : factor

5

Line 11: term : unary_expression

5

Line 11: simple_expression : term

5

Line 11: rel_expression : simple_expression RELOP simple_expression

i<5

Line 11: logic_expression : rel_expression

i<5

Line 11: expression : logic_expression

i<5

Line 7: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;
i=0;


Line 12: statement : BREAK SEMICOLON SEMICOLON

break;

Line 12: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;
i=0;
break;

Line 13: factor : CONST_INT

0

Line 13: unary_expression : factor

0

Line 13: term : unary_expression

0

Line 13: simple_expression : term

0

Line 13: rel_expression : simple_expression

0

Line 13: logic_expression : rel_expression

0

Line 13: expression : logic_expression

0

Line 13: statement : RETURN expression SEMICOLON

return 0;


Line 13: statements : statements statement

float d;
d=var(1,2*3)+3.5*2;
i=0;
break;return 0;


Line 14: compound_statement : LCURL statements RCURL

{
float d;
d=var(1,2*3)+3.5*2;
i=0;
break;return 0;
}

ScopeTable # 1.2
2 --> < d : ID >
ScopeTable # 1
0 --> < var : ID >< b : ID >
6 --> < a : ID >< main : ID >

Line 14: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
float d;
d=var(1,2*3)+3.5*2;
i=0;
break;return 0;
}


Line 14: unit : func_definition

int main(){
float d;
d=var(1,2*3)+3.5*2;
i=0;
break;return 0;
}


Line 14: program : program unit

int var(int a,int b){
return a+b;
}
int main(){
float d;
d=var(1,2*3)+3.5*2;
i=0;
break;return 0;
}


Line 14: start : program

ScopeTable # 1
0 --> < var : ID >< b : ID >
6 --> < a : ID >< main : ID >

Total lines: 14
Total number of errors: 6
