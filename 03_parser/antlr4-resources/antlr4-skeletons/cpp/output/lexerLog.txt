Line# 1: Token <INT> Lexeme int
Line# 1: Token <ID> Lexeme x
Line# 1: Token <COMMA> Lexeme ,
Line# 1: Token <ID> Lexeme y
Line# 1: Token <COMMA> Lexeme ,
Line# 1: Token <ID> Lexeme z
Line# 1: Token <SEMICOLON> Lexeme ;
Line# 2: Token <FLOAT> Lexeme float
Line# 2: Token <ID> Lexeme ab
Line# 2: Token <SEMICOLON> Lexeme ;
Line# 4: Token <VOID> Lexeme void
Line# 4: Token <ID> Lexeme foo
Line# 4: Token <LPAREN> Lexeme (
Line# 4: Token <RPAREN> Lexeme )
Line# 4: Token <SEMICOLON> Lexeme ;
Line# 5: Token <INT> Lexeme int
Line# 5: Token <ID> Lexeme var
Line# 5: Token <LPAREN> Lexeme (
Line# 5: Token <INT> Lexeme int
Line# 5: Token <ID> Lexeme a
Line# 5: Token <COMMA> Lexeme ,
Line# 5: Token <INT> Lexeme int
Line# 5: Token <ID> Lexeme b
Line# 5: Token <RPAREN> Lexeme )
Line# 5: Token <SEMICOLON> Lexeme ;
Line# 7: Token <INT> Lexeme int
Line# 7: Token <ID> Lexeme var
Line# 7: Token <LPAREN> Lexeme (
Line# 7: Token <INT> Lexeme int
Line# 7: Token <ID> Lexeme a
Line# 7: Token <COMMA> Lexeme ,
Line# 7: Token <INT> Lexeme int
Line# 7: Token <ID> Lexeme b
Line# 7: Token <RPAREN> Lexeme )
Line# 7: Token <LCURL> Lexeme {
Line# 8: Token <ID> Lexeme a
Line# 8: Token <ASSIGNOP> Lexeme =
Line# 8: Token <ID> Lexeme a
Line# 8: Token <ADDOP> Lexeme +
Line# 8: Token <ID> Lexeme y
Line# 8: Token <MULOP> Lexeme *
Line# 8: Token <CONST_INT> Lexeme 2
Line# 8: Token <SEMICOLON> Lexeme ;
Line# 9: Token <RETURN> Lexeme return
Line# 9: Token <ID> Lexeme a
Line# 9: Token <ADDOP> Lexeme +
Line# 9: Token <ID> Lexeme b
Line# 9: Token <SEMICOLON> Lexeme ;
Line# 10: Token <RCURL> Lexeme }
Line# 12: Token <VOID> Lexeme void
Line# 12: Token <ID> Lexeme foo
Line# 12: Token <LPAREN> Lexeme (
Line# 12: Token <RPAREN> Lexeme )
Line# 12: Token <LCURL> Lexeme {
Line# 13: Token <ID> Lexeme x
Line# 13: Token <ASSIGNOP> Lexeme =
Line# 13: Token <CONST_INT> Lexeme 2
Line# 13: Token <SEMICOLON> Lexeme ;
Line# 14: Token <ID> Lexeme y
Line# 14: Token <ASSIGNOP> Lexeme =
Line# 14: Token <ID> Lexeme x
Line# 14: Token <ADDOP> Lexeme -
Line# 14: Token <CONST_INT> Lexeme 5
Line# 14: Token <SEMICOLON> Lexeme ;
Line# 15: Token <RCURL> Lexeme }
Line# 17: Token <INT> Lexeme int
Line# 17: Token <ID> Lexeme main
Line# 17: Token <LPAREN> Lexeme (
Line# 17: Token <RPAREN> Lexeme )
Line# 17: Token <LCURL> Lexeme {
Line# 18: Token <INT> Lexeme int
Line# 18: Token <ID> Lexeme c
Line# 18: Token <COMMA> Lexeme ,
Line# 18: Token <ID> Lexeme i
Line# 18: Token <COMMA> Lexeme ,
Line# 18: Token <ID> Lexeme a
Line# 18: Token <LTHIRD> Lexeme [
Line# 18: Token <CONST_INT> Lexeme 2
Line# 18: Token <RTHIRD> Lexeme ]
Line# 18: Token <COMMA> Lexeme ,
Line# 18: Token <ID> Lexeme j
Line# 18: Token <SEMICOLON> Lexeme ;
Line# 18: Token <FLOAT> Lexeme float
Line# 18: Token <ID> Lexeme d
Line# 18: Token <SEMICOLON> Lexeme ;
Line# 19: Token <ID> Lexeme c
Line# 19: Token <ASSIGNOP> Lexeme =
Line# 19: Token <CONST_INT> Lexeme 4
Line# 19: Token <SEMICOLON> Lexeme ;
Line# 20: Token <ID> Lexeme d
Line# 20: Token <ASSIGNOP> Lexeme =
Line# 20: Token <CONST_FLOAT> Lexeme 9.5
Line# 20: Token <SEMICOLON> Lexeme ;
Line# 21: Token <ID> Lexeme j
Line# 21: Token <ASSIGNOP> Lexeme =
Line# 21: Token <CONST_INT> Lexeme 9
Line# 21: Token <SEMICOLON> Lexeme ;
Line# 23: Token <LCURL> Lexeme {
Line# 24: Token <ID> Lexeme a
Line# 24: Token <LTHIRD> Lexeme [
Line# 24: Token <CONST_INT> Lexeme 0
Line# 24: Token <RTHIRD> Lexeme ]
Line# 24: Token <ASSIGNOP> Lexeme =
Line# 24: Token <CONST_INT> Lexeme 1
Line# 24: Token <SEMICOLON> Lexeme ;
Line# 25: Token <ID> Lexeme a
Line# 25: Token <LTHIRD> Lexeme [
Line# 25: Token <CONST_INT> Lexeme 1
Line# 25: Token <RTHIRD> Lexeme ]
Line# 25: Token <ASSIGNOP> Lexeme =
Line# 25: Token <ID> Lexeme var
Line# 25: Token <LPAREN> Lexeme (
Line# 25: Token <ID> Lexeme c
Line# 25: Token <COMMA> Lexeme ,
Line# 25: Token <ID> Lexeme j
Line# 25: Token <RPAREN> Lexeme )
Line# 25: Token <SEMICOLON> Lexeme ;
Line# 26: Token <RCURL> Lexeme }
Line# 27: Token <ID> Lexeme i
Line# 27: Token <ASSIGNOP> Lexeme =
Line# 27: Token <ID> Lexeme a
Line# 27: Token <LTHIRD> Lexeme [
Line# 27: Token <CONST_INT> Lexeme 0
Line# 27: Token <RTHIRD> Lexeme ]
Line# 27: Token <ADDOP> Lexeme +
Line# 27: Token <ID> Lexeme a
Line# 27: Token <LTHIRD> Lexeme [
Line# 27: Token <CONST_INT> Lexeme 1
Line# 27: Token <RTHIRD> Lexeme ]
Line# 27: Token <SEMICOLON> Lexeme ;
Line# 29: Token <IF> Lexeme if
Line# 29: Token <LPAREN> Lexeme (
Line# 29: Token <ID> Lexeme c
Line# 29: Token <ID> Lexeme a
Line# 29: Token <LTHIRD> Lexeme [
Line# 29: Token <CONST_INT> Lexeme 0
Line# 29: Token <RTHIRD> Lexeme ]
Line# 29: Token <RPAREN> Lexeme )
Line# 29: Token <LCURL> Lexeme {
Line# 30: Token <ID> Lexeme c
Line# 30: Token <ASSIGNOP> Lexeme =
Line# 30: Token <CONST_INT> Lexeme 7
Line# 30: Token <SEMICOLON> Lexeme ;
Line# 31: Token <RCURL> Lexeme }
Line# 34: Token <IF> Lexeme if
Line# 34: Token <LPAREN> Lexeme (
Line# 34: Token <ID> Lexeme c
Line# 34: Token <ID> Lexeme d
Line# 34: Token <RPAREN> Lexeme )
Line# 34: Token <LCURL> Lexeme {
Line# 35: Token <ID> Lexeme a
Line# 35: Token <LTHIRD> Lexeme [
Line# 35: Token <CONST_INT> Lexeme 1
Line# 35: Token <RTHIRD> Lexeme ]
Line# 35: Token <ASSIGNOP> Lexeme =
Line# 35: Token <ADDOP> Lexeme -
Line# 35: Token <ID> Lexeme a
Line# 35: Token <LTHIRD> Lexeme [
Line# 35: Token <CONST_INT> Lexeme 1
Line# 35: Token <RTHIRD> Lexeme ]
Line# 35: Token <SEMICOLON> Lexeme ;
Line# 35: Token <SEMICOLON> Lexeme ;
Line# 36: Token <RCURL> Lexeme }
Line# 37: Token <ELSE> Lexeme else
Line# 37: Token <IF> Lexeme if
Line# 37: Token <LPAREN> Lexeme (
Line# 37: Token <ID> Lexeme c
Line# 37: Token <CONST_INT> Lexeme 2
Line# 37: Token <MULOP> Lexeme *
Line# 37: Token <ID> Lexeme d
Line# 37: Token <RPAREN> Lexeme )
Line# 37: Token <LCURL> Lexeme {
Line# 38: Token <ID> Lexeme a
Line# 38: Token <LTHIRD> Lexeme [
Line# 38: Token <CONST_INT> Lexeme 0
Line# 38: Token <RTHIRD> Lexeme ]
Line# 38: Token <ASSIGNOP> Lexeme =
Line# 38: Token <NOT> Lexeme !
Line# 38: Token <LPAREN> Lexeme (
Line# 38: Token <CONST_INT> Lexeme 7
Line# 38: Token <CONST_INT> Lexeme 5
Line# 38: Token <RPAREN> Lexeme )
Line# 38: Token <SEMICOLON> Lexeme ;
Line# 39: Token <RCURL> Lexeme }
Line# 40: Token <ELSE> Lexeme else
Line# 40: Token <LCURL> Lexeme {
Line# 41: Token <ID> Lexeme d
Line# 41: Token <ASSIGNOP> Lexeme =
Line# 41: Token <CONST_INT> Lexeme 2
Line# 41: Token <SEMICOLON> Lexeme ;
Line# 42: Token <RCURL> Lexeme }
Line# 44: Token <FOR> Lexeme for
Line# 44: Token <LPAREN> Lexeme (
Line# 44: Token <ID> Lexeme c
Line# 44: Token <ASSIGNOP> Lexeme =
Line# 44: Token <CONST_INT> Lexeme 0
Line# 44: Token <SEMICOLON> Lexeme ;
Line# 44: Token <ID> Lexeme c
Line# 44: Token <CONST_INT> Lexeme 2
Line# 44: Token <MULOP> Lexeme *
Line# 44: Token <ID> Lexeme d
Line# 44: Token <ADDOP> Lexeme +
Line# 44: Token <CONST_INT> Lexeme 3
Line# 44: Token <SEMICOLON> Lexeme ;
Line# 44: Token <ID> Lexeme c
Line# 44: Token <INCOP> Lexeme ++
Line# 44: Token <RPAREN> Lexeme )
Line# 44: Token <LCURL> Lexeme {
Line# 45: Token <ID> Lexeme a
Line# 45: Token <LTHIRD> Lexeme [
Line# 45: Token <CONST_INT> Lexeme 0
Line# 45: Token <RTHIRD> Lexeme ]
Line# 45: Token <ASSIGNOP> Lexeme =
Line# 45: Token <ID> Lexeme a
Line# 45: Token <LTHIRD> Lexeme [
Line# 45: Token <CONST_INT> Lexeme 0
Line# 45: Token <RTHIRD> Lexeme ]
Line# 45: Token <MULOP> Lexeme *
Line# 45: Token <CONST_INT> Lexeme 4
Line# 45: Token <SEMICOLON> Lexeme ;
Line# 46: Token <RCURL> Lexeme }
Line# 48: Token <WHILE> Lexeme while
Line# 48: Token <LPAREN> Lexeme (
Line# 48: Token <ID> Lexeme a
Line# 48: Token <LTHIRD> Lexeme [
Line# 48: Token <CONST_INT> Lexeme 0
Line# 48: Token <RTHIRD> Lexeme ]
Line# 48: Token <DECOP> Lexeme --
Line# 48: Token <RPAREN> Lexeme )
Line# 48: Token <LCURL> Lexeme {
Line# 49: Token <ID> Lexeme c
Line# 49: Token <ASSIGNOP> Lexeme =
Line# 49: Token <ID> Lexeme c
Line# 49: Token <ADDOP> Lexeme -
Line# 49: Token <CONST_INT> Lexeme 2
Line# 49: Token <SEMICOLON> Lexeme ;
Line# 50: Token <RCURL> Lexeme }
Line# 52: Token <PRINTLN> Lexeme printf
Line# 52: Token <LPAREN> Lexeme (
Line# 52: Token <ID> Lexeme c
Line# 52: Token <RPAREN> Lexeme )
Line# 52: Token <SEMICOLON> Lexeme ;
Line# 56: Token <ID> Lexeme j
Line# 56: Token <ASSIGNOP> Lexeme =
Line# 56: Token <CONST_INT> Lexeme 2
Line# 56: Token <MULOP> Lexeme *
Line# 56: Token <CONST_INT> Lexeme 3
Line# 56: Token <ADDOP> Lexeme +
Line# 56: Token <LPAREN> Lexeme (
Line# 56: Token <CONST_INT> Lexeme 5
Line# 56: Token <MULOP> Lexeme %
Line# 56: Token <CONST_INT> Lexeme 3
Line# 56: Token <CONST_INT> Lexeme 4
Line# 56: Token <CONST_INT> Lexeme 8
Line# 56: Token <RPAREN> Lexeme )
Line# 56: Token <LOGICOP> Lexeme ||
Line# 56: Token <CONST_INT> Lexeme 2
Line# 56: Token <SEMICOLON> Lexeme ;
Line# 57: Token <ID> Lexeme d
Line# 57: Token <ASSIGNOP> Lexeme =
Line# 57: Token <ID> Lexeme var
Line# 57: Token <LPAREN> Lexeme (
Line# 57: Token <CONST_INT> Lexeme 1
Line# 57: Token <COMMA> Lexeme ,
Line# 57: Token <CONST_INT> Lexeme 2
Line# 57: Token <MULOP> Lexeme *
Line# 57: Token <CONST_INT> Lexeme 3
Line# 57: Token <RPAREN> Lexeme )
Line# 57: Token <ADDOP> Lexeme +
Line# 57: Token <CONST_FLOAT> Lexeme 3.5
Line# 57: Token <MULOP> Lexeme *
Line# 57: Token <CONST_INT> Lexeme 2
Line# 57: Token <SEMICOLON> Lexeme ;
Line# 58: Token <RETURN> Lexeme return
Line# 58: Token <CONST_INT> Lexeme 0
Line# 58: Token <SEMICOLON> Lexeme ;
Line# 59: Token <RCURL> Lexeme }
