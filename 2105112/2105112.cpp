#line 2 "2105112.cpp"

#line 4 "2105112.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 47
#define YY_END_OF_BUFFER 48
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[188] =
    {   0,
       19,   19,    0,    0,    0,    0,    0,    0,    0,    0,
       48,   46,    1,   21,    1,   17,   29,   10,   46,   36,
        3,    4,    9,   15,    9,   46,   10,   18,   16,   12,
       13,   12,   20,   20,    7,    8,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,    5,
       46,    6,   47,   24,   47,   47,   27,   28,   27,   27,
       35,   34,   35,   31,   47,   47,   40,   47,   38,   47,
       47,    1,   21,   12,   14,   42,   11,   19,   25,   22,
        0,   18,   45,   45,   20,   20,    0,   44,   19,   20,
       20,   20,   20,   20,    2,   20,   20,   20,   20,    2,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   24,
       23,    0,   28,   26,   34,    0,   32,    0,   30,    0,
       40,    0,    0,   40,   37,    0,    0,   19,    0,    0,
       19,   19,   44,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       33,    0,   32,   41,    0,   39,   43,    0,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   33,
        0,    0,   20,   20,   20,   20,   20,   20,   20,    0,
        0,   20,   20,   20,   20,   20,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    1,    1,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   22,   22,    1,   23,   24,
       25,   26,    1,    1,   27,   27,   27,   27,   28,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       29,   30,   31,    1,   32,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   27,   42,   43,   27,   44,
       45,   27,   27,   46,   47,   48,   49,   50,   51,   27,
       27,   27,   52,   53,   54,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[55] =
    {   0,
        1,    2,    2,    2,    2,    2,    2,    1,    3,    1,
        1,    4,    1,    1,    1,    1,    1,    1,    5,    1,
        6,    7,    1,    1,    1,    1,    6,    6,    1,    3,
        1,    7,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    1,    1
    } ;

static const flex_int16_t yy_base[198] =
    {   0,
        0,    0,   52,   53,   54,   58,   59,   68,   98,    0,
      258,  619,   74,  619,   88,  222,  619,  619,  224,  217,
      619,  619,  211,  619,  198,   45,   55,  134,  619,  187,
      180,  174,   63,  142,  619,  619,  144,  146,  148,  151,
      153,  155,  159,  161,  167,  180,  186,  188,  192,  619,
      125,  619,  619,  619,  168,  151,  619,  619,  156,   68,
      619,  619,   69,  619,  219,  181,  619,  189,  619,  231,
        0,  234,  619,  619,  619,  619,  619,  223,  619,  619,
       65,  227,  196,  238,    0,   75,  231,  243,  247,  249,
      251,  254,  256,  258,  260,  263,  267,  269,  271,  273,

      280,  282,  284,  286,  292,  295,  299,  301,  308,  619,
      619,   60,  619,  619,  619,  348,  619,  354,  619,  332,
      619,  360,    0,  619,  619,  361,  312,  349,  360,  318,
      326,  364,  373,  366,  375,  379,  381,  383,  385,  387,
      389,  353,  392,  396,  405,  399,  411,  413,  416,  418,
      619,  460,  619,  619,  438,  619,  427,  421,  435,  448,
      450,  452,  454,  457,  459,  463,  461,  466,  469,  619,
      489,  497,  476,  471,  500,  479,  503,  505,  507,  511,
      520,  513,  522,  526,  528,  531,  619,  570,  577,  584,
      587,  589,  595,  601,  606,  607,  612

    } ;

static const flex_int16_t yy_def[198] =
    {   0,
      187,    1,  188,  188,  189,  189,  190,  190,  187,    9,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  191,  187,  187,
      187,  187,  192,  192,  187,  187,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  193,  194,  187,  194,  187,  194,
      195,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  191,  191,  191,  196,  192,  187,  187,  196,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  194,
      187,  194,  197,  187,  187,  194,  187,  187,  187,  191,
      191,  187,  187,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      187,  187,  187,  187,  194,  187,  187,  187,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  187,
      187,  187,  192,  192,  192,  192,  192,  192,  192,  187,
      187,  192,  192,  192,  192,  192,    0,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187

    } ;

static const flex_int16_t yy_nxt[674] =
    {   0,
       12,   13,   14,   13,   13,   15,   13,   16,   17,   18,
       19,   20,   21,   22,   18,   23,   24,   25,   26,   27,
       28,   28,   29,   30,   31,   32,   33,   34,   35,   12,
       36,   33,   33,   37,   38,   39,   40,   41,   42,   33,
       43,   33,   44,   33,   33,   45,   46,   33,   47,   48,
       49,   50,   51,   52,   54,   54,   58,   55,   55,   59,
       58,   62,  111,   59,   63,   78,   78,   64,   60,   79,
       62,  115,   60,   63,   80,   72,   64,   72,   72,   72,
       72,   56,   56,   85,   85,   78,   78,  114,   65,   72,
       73,   72,   72,   72,   72,   85,   85,   65,   66,   66,

       67,   66,   66,   68,   66,   66,   66,   66,   66,   69,
       66,   66,   66,   66,   66,   66,   66,   66,   70,   70,
       66,   66,   66,   66,   70,   70,   66,   71,   66,   66,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   66,
       66,   66,   81,  111,   82,   82,  112,   87,  113,   87,
       88,   84,   89,   89,   85,   85,   85,   85,   85,   85,
      110,   85,   85,   85,   85,   85,   85,   75,   91,   85,
       85,   85,   85,  121,   94,   92,  122,   85,   85,   90,
       93,  124,   95,   96,  122,   97,  100,   98,   74,   99,

       85,   85,  101,  103,   74,  102,   85,   85,   85,   85,
      123,   74,   85,   85,  187,   77,  130,  130,  123,  104,
      116,  117,  116,  116,  118,  116,   77,  105,   76,  107,
      106,  109,  108,  121,   75,   72,  122,   72,   72,   72,
       72,  127,  125,  128,  128,   81,   74,   82,   82,   88,
      129,  132,  132,   87,   84,   87,   88,  187,  131,  131,
      123,   88,  187,  133,  133,   88,  187,   89,   89,   85,
       85,   85,   85,  187,   85,   85,   85,   85,   85,   85,
       85,   85,  187,   85,   85,  134,  136,   85,   85,   85,
       85,   85,   85,   85,   85,  138,  187,  135,  187,  137,

       85,   85,   85,   85,   85,   85,   85,   85,  139,  140,
      187,  141,   85,   85,  100,   85,   85,  187,  142,   85,
       85,   85,   85,  187,  146,  143,  187,  100,   85,   85,
      145,  144,  157,  157,  121,  147,  187,  122,  130,  130,
      187,  149,  187,  154,   88,  148,  131,  131,  150,  116,
      151,  116,  116,  152,  116,  116,  153,  116,  116,  152,
      116,  123,  124,  121,  187,  122,  122,  158,  187,  128,
      128,  154,  156,   85,   85,   87,  129,   87,   88,  187,
      132,  132,   88,  187,  132,  132,   85,   85,  187,  123,
      123,   88,  187,  133,  133,   85,   85,  100,  159,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,  100,   85,   85,  187,  161,   85,   85,  162,   85,
       85,  163,  187,  100,  100,   85,   85,  187,  160,  187,
      100,   85,   85,   85,   85,  187,   85,   85,   85,   85,
      121,  171,  171,  122,  164,  127,  166,  171,  171,  154,
      165,  100,  187,  168,  172,   85,   85,  187,  167,  187,
      169,  116,  170,  116,  116,  152,  116,  123,   85,   85,
       85,   85,   85,   85,   85,   85,  100,   85,   85,   85,
       85,   85,   85,   85,   85,  187,   85,   85,  173,   85,
       85,   85,   85,  187,  175,  178,   85,   85,  174,   85,

       85,  100,  176,  177,  179,  100,  100,  158,  187,  171,
      171,  187,  180,  183,  180,   88,  172,  181,  181,  182,
       85,   85,  100,   85,   85,   85,   85,   85,   85,   88,
      187,  181,  181,   85,   85,  187,  100,  100,   88,  187,
      181,  181,   85,   85,  100,  187,   85,   85,   85,   85,
      184,   85,   85,  187,  187,  187,  187,  187,  187,  187,
      187,  185,  186,  187,  100,  187,  100,  187,  187,  100,
       53,   53,   53,   53,   53,   53,   53,   57,   57,   57,
       57,   57,   57,   57,   61,   61,   61,   61,   61,   61,
       61,   83,   83,   83,   86,   86,  119,  119,  119,  187,

      119,  120,  120,  120,  187,  120,  120,  120,  126,  126,
      187,  126,   85,   85,  155,  155,  187,  155,   11,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187
    } ;

static const flex_int16_t yy_chk[674] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,    5,    3,    4,    5,
        6,    7,  112,    6,    7,   26,   26,    7,    5,   27,
        8,   63,    6,    8,   27,   13,    8,   13,   13,   13,
       13,    3,    4,   33,   33,   81,   81,   60,    7,   15,
       15,   15,   15,   15,   15,   86,   86,    8,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   28,   56,   28,   28,   56,   34,   59,   34,
       34,   28,   34,   34,   37,   37,   38,   38,   39,   39,
       55,   40,   40,   41,   41,   42,   42,   51,   38,   43,
       43,   44,   44,   66,   39,   38,   66,   45,   45,   37,
       38,   68,   39,   40,   68,   41,   43,   41,   32,   42,

       46,   46,   43,   45,   31,   44,   47,   47,   48,   48,
       66,   30,   49,   49,   83,   25,   83,   83,   68,   46,
       65,   65,   65,   65,   65,   65,   23,   46,   20,   47,
       46,   49,   48,   70,   19,   72,   70,   72,   72,   72,
       72,   78,   70,   78,   78,   82,   16,   82,   82,   87,
       78,   87,   87,   84,   82,   84,   84,   11,   84,   84,
       70,   88,    0,   88,   88,   89,    0,   89,   89,   90,
       90,   91,   91,    0,   92,   92,   93,   93,   94,   94,
       95,   95,    0,   96,   96,   90,   92,   97,   97,   98,
       98,   99,   99,  100,  100,   94,    0,   91,    0,   93,

      101,  101,  102,  102,  103,  103,  104,  104,   95,   96,
        0,   97,  105,  105,   98,  106,  106,    0,   99,  107,
      107,  108,  108,    0,  105,  102,    0,  101,  109,  109,
      104,  103,  127,  127,  120,  106,  130,  120,  130,  130,
        0,  108,    0,  120,  131,  107,  131,  131,  109,  116,
      116,  116,  116,  116,  116,  118,  118,  118,  118,  118,
      118,  120,  122,  126,    0,  122,  126,  128,    0,  128,
      128,  122,  126,  142,  142,  129,  128,  129,  129,    0,
      129,  129,  132,    0,  132,  132,  134,  134,    0,  122,
      126,  133,    0,  133,  133,  135,  135,  142,  134,  136,

      136,  137,  137,  138,  138,  139,  139,  140,  140,  141,
      141,  135,  143,  143,    0,  138,  144,  144,  139,  146,
      146,  141,    0,  140,  136,  145,  145,    0,  137,    0,
      143,  147,  147,  148,  148,    0,  149,  149,  150,  150,
      155,  158,  158,  155,  144,  157,  146,  157,  157,  155,
      145,  149,    0,  148,  157,  159,  159,    0,  147,    0,
      150,  152,  152,  152,  152,  152,  152,  155,  160,  160,
      161,  161,  162,  162,  163,  163,  159,  164,  164,  165,
      165,  167,  167,  166,  166,    0,  168,  168,  160,  169,
      169,  174,  174,    0,  162,  167,  173,  173,  161,  176,

      176,  163,  164,  166,  168,  169,  165,  171,    0,  171,
      171,    0,  172,  174,  172,  172,  171,  172,  172,  173,
      175,  175,  176,  177,  177,  178,  178,  179,  179,  180,
        0,  180,  180,  182,  182,    0,  175,  177,  181,    0,
      181,  181,  183,  183,  178,    0,  184,  184,  185,  185,
      179,  186,  186,    0,    0,    0,    0,    0,    0,    0,
        0,  182,  184,    0,  185,    0,  186,    0,    0,  183,
      188,  188,  188,  188,  188,  188,  188,  189,  189,  189,
      189,  189,  189,  189,  190,  190,  190,  190,  190,  190,
      190,  191,  191,  191,  192,  192,  193,  193,  193,    0,

      193,  194,  194,  194,    0,  194,  194,  194,  195,  195,
        0,  195,  196,  196,  197,  197,    0,  197,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "2105112.l"




#line 9 "2105112.l"

#include<bits/stdc++.h>
#include "SymbolTable.cpp"
using namespace std;

ofstream flog;
ofstream ftoken;

string current_lexeme;

int line_count = 0;
int current_line_count = 0;

int comment_count = 0;
int single_line_comment_count = 0;
int multi_line_comment_count = 0;

int error_count = 0;

int num_buckets = 10;
SymbolTable* symbolTable = new SymbolTable(num_buckets, &flog, "SDBM"); 

string make_all_capital_letter(string str){
    for(int i=0; i < str.length(); i++){
        if('a' <= str[i] && str[i] <= 'z'){
            str[i] = 'A' + str[i] - 'a'; 
        }
    }

    return str;
}

string make_all_small_letter(string str){
    for(int i=0; i < str.length(); i++){
        if('A' <= str[i] && str[i] <= 'Z'){
            str[i] = 'a' + str[i] - 'A'; 
        }
    }

    return str;
}

string make_keyword_token(string keyword){
    return "<" + make_all_capital_letter(keyword) + ">";
}

string get_character_literal(char const_char){
    switch(const_char){
        case 'n':
            return "\n";
            break;
        case 't':
            return "\t";
            break;
        case '\\':
            return "\\";
            break;
        case '\'':
            return "'";
            break;
        case 'a':
            return "\a";
            break;
        case 'f':
            return "\f";
            break;
        case 'r':
            return "\r";
            break;
        case 'b':
            return "\b";
            break;
        case 'v':
            return "\v";
            break;
        case '0':
            return "\0";
            break;
        case '\"':
            return "\"";
            break;
        default:
            return "no match"; 
            break;
    }
}

void handle_error(string error_msg, int current_line_count){
    error_count++;
    flog<<"Error at line no " + to_string(current_line_count) + ": ";
    flog<<error_msg<<endl<<endl;
}

void print_tokens(string token){
    ftoken<<token<<" ";

    int middle_reached = 0;
    string type = "", name = "";
    for( int i = 0; i < token.length(); i++){
        if(token[i] == ','){
            middle_reached = 1;
        }else if(middle_reached == 0 && token[i] != '<' && token[i] != '>' ){
            type += token[i];
        }else if(middle_reached == 1 && token[i] != '>'){
            name += token[i];
        }
    }

    if(name == ""){
        name = make_all_small_letter(type);
    }

    flog<<"Line no "<<to_string(line_count + 1)<<": Token <"<<type<<"> Lexeme "<<name<<" found"<<endl<<endl;

    if(type == "ID" || type == "CONST_INT" || type == "CONST_FLOAT"){
        symbolTable->Insert(name, type);
        symbolTable->Print_All();
    }
}

string make_string_token(string str){
    return "<STRING, " + str + ">";
}

#line 786 "2105112.cpp"
#line 787 "2105112.cpp"

#define INITIAL 0
#define initiate_single_line_comment 1
#define initiate_multi_line_comment 2
#define initiate_string 3
#define initiate_const_char 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 172 "2105112.l"


#line 1011 "2105112.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 188 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 619 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 174 "2105112.l"
{
                cout<<yytext;
            }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 178 "2105112.l"
{
                cout<<yytext;
                print_tokens(make_keyword_token(yytext));
            }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 183 "2105112.l"
{
                cout<<yytext;
                print_tokens("<LPAREN, (>");
            }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 188 "2105112.l"
{
                cout<<yytext;
                print_tokens("<RPAREN, )>");
            }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 193 "2105112.l"
{
                cout<<yytext;
                print_tokens("<LCURL, {>");
                symbolTable->Enter_Scope();
            }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 199 "2105112.l"
{
                cout<<yytext;
                print_tokens("<RCURL, }>");
                symbolTable->Exit_Scope();
            }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 205 "2105112.l"
{
                cout<<yytext;
                print_tokens("<LTHIRD, [>");
            }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 210 "2105112.l"
{
                cout<<yytext;
                print_tokens("<RTHIRD, ]>");
            }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 215 "2105112.l"
{
                cout<<yytext;
                current_lexeme = yytext;
                print_tokens("<ADDOP, "+current_lexeme+">");
            }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 221 "2105112.l"
{
                cout<<yytext;
                current_lexeme = yytext;
                print_tokens("<MULOP, "+current_lexeme+">");
            }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 227 "2105112.l"
{
                cout<<yytext;
                current_lexeme = yytext;
                print_tokens("<INCOP, "+current_lexeme+">");
            }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 233 "2105112.l"
{
                cout<<yytext;
                current_lexeme = yytext;
                print_tokens("<RELOP, "+current_lexeme+">");
            }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 239 "2105112.l"
{
                cout<<yytext;
                current_lexeme = yytext;
                print_tokens("<ASSIGNOP, "+current_lexeme+">");
            }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 245 "2105112.l"
{
                cout<<yytext;
                current_lexeme = yytext;
                print_tokens("<LOGICOP, "+current_lexeme+">");
            }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 251 "2105112.l"
{
                cout<<yytext;
                print_tokens("<COMMA, ,>");
            }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 256 "2105112.l"
{
                cout<<yytext;
                print_tokens("<SEMICOLON, ;>");
            }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 261 "2105112.l"
{
                cout<<yytext;
                print_tokens("<NOT, !>");
            }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 266 "2105112.l"
{
                cout<<yytext;
                current_lexeme = yytext;
                print_tokens("<CONST_INT, "+current_lexeme+">");
            }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 272 "2105112.l"
{
                cout<<yytext;
                current_lexeme = yytext;
                print_tokens("<CONST_FLOAT, "+current_lexeme+">");
            }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 278 "2105112.l"
{
                cout<<yytext;
                current_lexeme = yytext;
                print_tokens("<ID, "+current_lexeme+">");
            }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 284 "2105112.l"
{
                cout<<yytext;
                line_count++;
            }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 289 "2105112.l"
{
                cout<<yytext;
                BEGIN initiate_single_line_comment;
            }
	YY_BREAK

case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 296 "2105112.l"
{
                    cout<<yytext;
                    line_count++;
                }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 301 "2105112.l"
{
                    cout<<yytext;
                    comment_count++;
                    single_line_comment_count++;
                    line_count++;
                    BEGIN INITIAL;
                }
	YY_BREAK
case YY_STATE_EOF(initiate_single_line_comment):
#line 309 "2105112.l"
{
                    cout<<yytext;
                    comment_count++;
                    single_line_comment_count++;
                    line_count++;
                    BEGIN INITIAL;
                }
	YY_BREAK

case 25:
YY_RULE_SETUP
#line 319 "2105112.l"
{
                cout<<yytext;
                current_lexeme = yytext;
                current_line_count = line_count + 1;
                BEGIN initiate_multi_line_comment;
            }
	YY_BREAK

case 26:
YY_RULE_SETUP
#line 328 "2105112.l"
{
                    cout<<yytext;
                    comment_count++;
                    multi_line_comment_count++;
                    BEGIN INITIAL;
                }
	YY_BREAK
case YY_STATE_EOF(initiate_multi_line_comment):
#line 335 "2105112.l"
{
                    string error_msg = "Unterminated comment ";
                    error_msg += current_lexeme;
                    handle_error(error_msg, current_line_count);
                    BEGIN INITIAL;
                }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 342 "2105112.l"
{
                    cout<<yytext;
                    current_lexeme += yytext;
                }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 347 "2105112.l"
{
                    cout<<yytext;
                    current_lexeme += yytext;
                    line_count++;
                }
	YY_BREAK

case 29:
YY_RULE_SETUP
#line 355 "2105112.l"
{
                cout<<yytext;
                current_lexeme = "";
                current_line_count = line_count + 1;
                BEGIN initiate_string;
            }
	YY_BREAK

case 30:
YY_RULE_SETUP
#line 364 "2105112.l"
{
        string temp = get_character_literal(yytext[1]);
        if(temp != "no match"){
            current_lexeme += temp;
        }else{
            string invalid_term = yytext;
            handle_error("invalid escape sequence " + invalid_term, current_line_count);
            BEGIN INITIAL;
        }
    }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 375 "2105112.l"
{
                    print_tokens(make_string_token(current_lexeme));
                    BEGIN INITIAL;
                }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 380 "2105112.l"
{
                    line_count++;

                }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 385 "2105112.l"
{
                    cout<<yytext;
                    line_count++;
                    handle_error("backslash and newline separated by space", current_line_count);
                }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 391 "2105112.l"
{
                    cout<<yytext;
                    line_count++;
                    string error_msg = "Unterminated string ";
                    error_msg += "\"";
                    error_msg += current_lexeme;
                    handle_error(error_msg, current_line_count);
                    BEGIN INITIAL;
                }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 401 "2105112.l"
{
        cout<<yytext;
        current_lexeme += yytext;
                }
	YY_BREAK

case 36:
YY_RULE_SETUP
#line 408 "2105112.l"
{
    cout<<yytext;
    current_lexeme = "";
    current_line_count = line_count + 1;
    BEGIN initiate_const_char;
}
	YY_BREAK

case 37:
YY_RULE_SETUP
#line 417 "2105112.l"
{
        cout<<yytext;
        current_lexeme = "";
        current_lexeme += yytext[0];
        print_tokens("<CONST_CHAR, " + current_lexeme + ">");
        BEGIN INITIAL;
    }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 425 "2105112.l"
{
        cout<<yytext;
        current_lexeme = "";
        print_tokens("<CONST_CHAR, " + current_lexeme + ">");
        BEGIN INITIAL;
    }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 432 "2105112.l"
{
        cout<<yytext;
        current_lexeme = get_character_literal(yytext[1]);
        if( current_lexeme == "no match"){
            string error_msg = "Invalid character literal ";
            error_msg += "'";
            error_msg += yytext;
            handle_error(error_msg, current_line_count);
            BEGIN INITIAL;
        }else{
            print_tokens("<CONST_CHAR, " + current_lexeme + ">");
            BEGIN INITIAL;
        }  
    }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 447 "2105112.l"
{
        cout<<yytext;
        string error_msg = "Unterminated character ";
        error_msg += "\'";
        error_msg += yytext;
        handle_error(error_msg, current_line_count);
        line_count++;
        BEGIN INITIAL;  
    }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 457 "2105112.l"
{
        cout<<yytext;
        string error_msg = "Multi character constant error ";
        error_msg += "'";
        error_msg += yytext;
        handle_error(error_msg, current_line_count);
        BEGIN INITIAL;
    }
	YY_BREAK

case 42:
YY_RULE_SETUP
#line 468 "2105112.l"
{
                cout<<yytext;
                string error_msg = "Empty character constant error ";
                error_msg += yytext;
                handle_error(error_msg, line_count + 1);
            }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 475 "2105112.l"
{
                cout<<yytext;
                string error_msg = "Too many decimal points ";
                error_msg += yytext;
                handle_error(error_msg, line_count + 1);
            }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 482 "2105112.l"
{
                cout<<yytext;
                string error_msg = "Ill formed number ";
                error_msg += yytext;
                handle_error(error_msg, line_count + 1);
            }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 489 "2105112.l"
{
                cout<<yytext;
                string error_msg = "Invalid prefix on ID or invalid suffix on Number ";
                error_msg += yytext;
                handle_error(error_msg, line_count + 1);
            }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(initiate_string):
case YY_STATE_EOF(initiate_const_char):
#line 496 "2105112.l"
{
                cout<<endl;
                line_count++;
                symbolTable->Print_All();
                return 0;
            }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 503 "2105112.l"
{
                cout<<yytext;
                string error_msg = "Unrecognized character ";
                error_msg += yytext;
                handle_error(error_msg, line_count + 1);
            }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 510 "2105112.l"
ECHO;
	YY_BREAK
#line 1555 "2105112.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 188 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 188 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 187);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 510 "2105112.l"


int main(int argc,char *argv[]){

	if(argc!=2){
		printf("Please provide input file name and try again\n");
		return 0;
	}

	FILE *fin=fopen(argv[1],"r");
	if(fin==NULL){
		printf("Cannot open specified file\n");
		return 0;
	}

	flog.open("2105112_log.txt");
	ftoken.open("2105112_token.txt");
	
    yyin= fin;
	yylex();
	fclose(yyin);
	
    cout<<"Total lines : "<<line_count<<endl;
    flog<<"Total lines: "<<line_count<<endl;
    cout<<"total comment count: "<<comment_count<<endl;
    cout<<"single line comment count: "<<single_line_comment_count<<endl;
    cout<<"multi line comment count: "<<multi_line_comment_count<<endl;
    cout<<"Total errors : "<<error_count<<endl;
    flog<<"Total errors: "<<error_count<<endl;

    flog.close();
    ftoken.close();

    return 0;
}
